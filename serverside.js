// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, async, comm, crypto, decorate, decorators, dgram, ejslocals, env, express, grapher, helpers, http, initDb, initExpress, initListener, initLogger, initRoutes, initWebsockets, logger, mongodb, settings, _;

  crypto = require('crypto');

  async = require('async');

  _ = require('underscore');

  Backbone = require('backbone4000');

  mongodb = require('mongodb');

  http = require('http');

  express = require('express');

  ejslocals = require('ejs-locals');

  logger = require('logger');

  helpers = require('helpers');

  decorators = require('decorators');

  decorate = decorators.decorate;

  comm = require('comm/serverside');

  dgram = require('dgram');

  settings = {
    db: {
      name: 'logger',
      host: 'localhost',
      port: 27017
    },
    port: 3334,
    cookiesecret: 'eTkj6vB53WgwwMWXqnOsoWvnQkQ692UmsNAgtoU+',
    express: {
      "static": __dirname + '/static',
      views: __dirname + '/ejs'
    }
  };

  env = {};

  env.settings = helpers.extend(settings, require('./settings').settings);

  initLogger = function(env, callback) {
    env.logger = new logger.logger();
    env.consoleLogger = new logger.consoleLogger();
    env.logger.pass();
    env.logger.connect(env.consoleLogger);
    env.log = env.logger.log.bind(env.logger);
    env.logres = function(name, callback) {
      return function(err, data) {
        if (err) {
          env.log(name + ': ' + err, {
            error: err
          }, 'init', 'fail');
        } else {
          env.log(name + "...", {}, 'init', 'ok');
        }
        return callback(err, data);
      };
    };
    env.log('logger...', {}, 'init', 'ok');
    return callback();
  };

  initDb = function(env, callback) {
    env.db = new mongodb.Db(env.settings.db.name, new mongodb.Server(env.settings.db.host, env.settings.db.port), {
      safe: true
    });
    return env.db.open(callback);
  };

  initExpress = function(env, callback) {
    var app;
    env.app = app = express();
    app.configure(function() {
      app.engine('ejs', ejslocals);
      app.set('view engine', 'ejs');
      app.set('views', env.settings.express.views);
      app.use(express.favicon());
      app.use(express.bodyParser());
      app.use(express.methodOverride());
      app.use(express.cookieParser());
      app.use(app.router);
      app.use(express["static"](env.settings.express["static"]));
      return app.use(function(err, req, res, next) {
        env.log('web request error', {
          stack: err.stack
        }, 'error', 'http');
        return res.send(500, 'BOOOM!');
      });
    });
    env.server = http.createServer(env.app);
    env.server.listen(env.settings.port);
    env.log('http server listening at ' + env.settings.port, {}, 'init', 'http');
    return callback(void 0, true);
  };

  initRoutes = function(env, callback) {
    var logreq;
    logreq = function(req, res, next) {
      var forwarded, host;
      host = req.socket.remoteAddress;
      if (host === "127.0.0.1") {
        if (forwarded = req.headers['x-forwarded-for']) {
          host = forwarded;
        }
      }
      env.log(req.originalUrl, {
        host: host,
        headers: req.headers,
        method: req.method
      }, 'http', req.method, host);
      return next();
    };
    env.app.get('*', logreq);
    env.app.post('*', logreq);
    env.app.get('/', function(req, res) {
      return res.render('index', {
        title: 'logger'
      });
    });
    callback();
    return env.app.get('/pic/*', function(req, res, next) {
      res.setHeader("Cache-Control", "public, max-age=1000");
      return next();
    });
  };

  initWebsockets = function(env, callback) {
    env.websocket = new comm.WebsocketServer({
      http: env.server,
      realm: 'web',
      name: 'websocket',
      options: {
        notransmit: true,
        socketio: {
          log: false
        }
      }
    });
    env.websocket.pass();
    env.websocket.listen(function(client) {
      var host, id, socket;
      socket = client.get('socket');
      id = socket.id;
      host = socket.handshake.address.address;
      return env.log('', {
        id: socket.id,
        host: host
      }, 'socketio', 'connected', host, id);
    });
    return callback(void 0, true);
  };

  initListener = function(env, callback) {
    var server;
    server = env.loglistener = dgram.createSocket('udp4');
    server.on("message", function(msg, rinfo) {
      return env.websocket.msg(msg = new comm.Msg(JSON.parse(msg)));
    });
    server.on("listening", function() {
      var address;
      address = server.address();
      console.log("server listening " + address.address + ":" + address.port);
      return callback();
    });
    return server.bind(41234);
  };

  exports.init = function(env, callback) {
    return async.auto({
      logger: function(callback) {
        return initLogger(env, callback);
      },
      listener: [
        'websockets', 'logger', function(callback) {
          return initListener(env, env.logres('UDP listener', callback));
        }
      ],
      database: [
        'logger', function(callback) {
          return initDb(env, env.logres('database', callback));
        }
      ],
      express: [
        'database', 'logger', function(callback) {
          return initExpress(env, env.logres('express', callback));
        }
      ],
      routes: [
        'express', function(callback) {
          return initRoutes(env, env.logres('routes', callback));
        }
      ],
      websockets: [
        'express', function(callback) {
          return initWebsockets(env, env.logres('websockets', callback));
        }
      ]
    }, callback);
  };

  exports.init(env, function() {
    return true;
  });

  grapher = require('debuggrapher-probe');

  grapher.watch('mem_self', 'rss', 500, function() {
    return process.memoryUsage().rss / 1048576;
  });

  grapher.watch('mem_self', 'heapTotal', 500, function() {
    return process.memoryUsage().heapTotal / 1048576;
  });

  grapher.watch('mem_self', 'heapUsed', 500, function() {
    return process.memoryUsage().heapUsed / 1048576;
  });

}).call(this);
